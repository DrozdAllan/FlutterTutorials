@override
  void initState() {
    super.initState();
    cameraController = CameraController(cameras![1], ResolutionPreset.low);
    cameraController.initialize().then((value) {
      if (!mounted) {
        return;
      } else {
        setState(() {
          cameraController.startImageStream((imageStream) {
            cameraImage = imageStream;

            // load Model IF NOT WORKING PROPERLY CHECK BACK THE TUTO TO CHANGE THE INIT
            loadmodel();
            // Run Tflite model
            runModel();
          });
        });
      }
    });
  }

  runModel() async {
    if (cameraImage != null) {
      var predictions = await Tflite.runModelOnFrame(
          bytesList: cameraImage!.planes.map(
            (plane) {
              return plane.bytes;
            },
          ).toList(),
          imageHeight: cameraImage!.height,
          imageWidth: cameraImage!.width,
          imageMean: 127.5,
          imageStd: 127.5,
          rotation: 90,
          numResults: 2,
          threshold: 0.1,
          asynch: true);
      predictions!.forEach((element) {
        setState(() {
          output = element['label'];
        });
      });
    }
  }

  loadmodel() async {
    await Tflite.loadModel(
        model: "assets/model.tflite", labels: "assets/labels.txt");
  }









  V22222222222222222222222222222222222

   @override
  void initState() {
    super.initState();
    loadmodel();
    runCamera();
  }

  loadmodel() async {
    await Tflite.loadModel(
        model: "assets/model.tflite", labels: "assets/labels.txt");
  }

  runCamera() async {
    controller = new CameraController(widget.cameras[1], ResolutionPreset.low);
    controller.initialize().then((value) {
      if (!mounted) {
        return;
      } else {
        setState(() {});

        controller.startImageStream((CameraImage img) {
          runModel(img);
        });
      }
    });
  }

  runModel(img) async {
    var predictions = await Tflite.runModelOnFrame(
        bytesList: img.planes.map((plane) {
          return plane.bytes;
        }).toList(),
        imageHeight: img.height,
        imageWidth: img.width,
        imageMean: 127.5,
        imageStd: 127.5,
        rotation: 90,
        numResults: 2);
    predictions!.forEach((element) {
      setState(() {
        output = element['label'];
      });
    });
  }